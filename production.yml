version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: anabin_rest_api_production_django
    container_name: django
    expose:
      - 8000
    depends_on:
      - postgres
      # - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: anabin_rest_api_production_postgres
    container_name: postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres
    
  nginx:
    build: 
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    container_name: nginx-prod
    ports:
      - 80:80
      - "443:443"
    volumes:
      # - ./compose/production/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      # - ./compose/production/letsencrypt-site:/usr/share/nginx/html
      - ./compose/production/dh-param/dhparam-2048.pem:/etc/ssl/certs/dhparam-2048.pem
      - /docker-volumes/etc/letsencrypt/live/kmvinoth.org/fullchain.pem:/etc/letsencrypt/live/kmvinoth.org/fullchain.pem
      - /docker-volumes/etc/letsencrypt/live/kmvinoth.org/privkey.pem:/etc/letsencrypt/live/kmvinoth.org/privkey.pem

    depends_on:
      - django

# networks:
#   docker-network:
#     driver: bridge

  # traefik:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/traefik/Dockerfile
  #   image: anabin_rest_api_production_traefik
  #   depends_on:
  #     - django
  #   volumes:
  #     - production_traefik:/etc/traefik/acme
  #   ports:
  #     - "0.0.0.0:80:80"
  #     - "0.0.0.0:443:443"
  #     - "0.0.0.0:5555:5555"

  # redis:
  #   image: redis:5.0

  # celeryworker:
  #   <<: *django
  #   image: anabin_rest_api_production_celeryworker
  #   command: /start-celeryworker

  # celerybeat:
  #   <<: *django
  #   image: anabin_rest_api_production_celerybeat
  #   command: /start-celerybeat

  # flower:
  #   <<: *django
  #   image: anabin_rest_api_production_flower
  #   command: /start-flower

  
  # awscli:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/aws/Dockerfile
  #   env_file:
  #     - ./.envs/.production/.django
  #   volumes:
  #     - production_postgres_data_backups:/backups